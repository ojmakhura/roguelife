// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.roguesystems.life.kingdom;

import bw.co.roguesystems.life.phylum.PhylumRepository;
import org.springframework.stereotype.Repository;

/**
 * @see Kingdom
 */
@Repository("kingdomDao")
public class KingdomDaoImpl
    extends KingdomDaoBase
{
    
    public KingdomDaoImpl(
        PhylumRepository phylumRepository,
        KingdomRepository kingdomRepository
    ) {

        super(
            phylumRepository,
            kingdomRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toKingdomVO(
        Kingdom source,
        KingdomVO target)
    {
        // TODO verify behavior of toKingdomVO
        super.toKingdomVO(source, target);
        // WARNING! No conversion for target.domain (can't convert source.getDomain():bw.co.roguesystems.life.domain.Domain to bw.co.roguesystems.life.domain.DomainVO
        // WARNING! No conversion for target.phyla (can't convert source.getPhyla():bw.co.roguesystems.life.phylum.Phylum to bw.co.roguesystems.life.phylum.PhylumVO
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KingdomVO toKingdomVO(final Kingdom entity)
    {
        // TODO verify behavior of toKingdomVO
        return super.toKingdomVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Kingdom loadKingdomFromKingdomVO(KingdomVO kingdomVO)
    {
        // TODO implement loadKingdomFromKingdomVO
        throw new UnsupportedOperationException("bw.co.roguesystems.life.kingdom.loadKingdomFromKingdomVO(KingdomVO) not yet implemented.");

        /* A typical implementation looks like this:
        if (kingdomVO.getId() == null)
        {
            return  Kingdom.Factory.newInstance();
        }
        else
        {
            return this.load(kingdomVO.getId());
        }
        */
    }

    /**
     * {@inheritDoc}
     */
    public Kingdom kingdomVOToEntity(KingdomVO kingdomVO)
    {
        // TODO verify behavior of kingdomVOToEntity
        Kingdom entity = this.loadKingdomFromKingdomVO(kingdomVO);
        this.kingdomVOToEntity(kingdomVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void kingdomVOToEntity(
        KingdomVO source,
        Kingdom target,
        boolean copyIfNull)
    {
        // TODO verify behavior of kingdomVOToEntity
        super.kingdomVOToEntity(source, target, copyIfNull);
    }
}